import datetime
from functions.self_logging import *
from aiogram import types
from config_info.config import *
from database_functions.get_info import get_event_datetime
from database_functions.main_db import *
from aiogram.dispatcher import FSMContext
from functions.states_classes import *
import keyboards as kb
from functions.notify import schedule_jobs

async def check_date(date):
    try:
        datetime.datetime.strptime(date, "%d.%m.%Y")
    except ValueError:
        return 0
    return 1

# –°–û–ó–î–ê–ù–ò–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø
@disp.callback_query_handler(text='new_event')
async def new_event(call: types.CallbackQuery, state: FSMContext):
    if not check_admin(call.message.chat.id):
        await call.message.edit_text("‚ùå –í–∞—à–∏—Ö –ø—Ä–∞–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã!", reply_markup=kb.all_events_kb)
        return
    await call.message.edit_text("üñã –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    await state.set_state(AddEvent.waiting_for_name.state)

async def read_event_name(message: types.Message, state: FSMContext):
    await state.update_data(event_name=message.text)
    await message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å (–±–µ–∑ —Ç–æ—á–µ–∫, –∑–∞–ø—è—Ç—ã—Ö –∏ –ø—Ä–æ–±–µ–ª–æ–≤")
    await state.set_state(AddEvent.waiting_for_cost.state)

async def read_event_cost(message: types.Message, state: FSMContext):
    await state.update_data(event_cost=int(message.text))
    await message.answer("üóì –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì")
    await state.set_state(AddEvent.waiting_for_date.state)

async def read_event_date(message: types.Message, state: FSMContext):
    input_date = str(message.text)
    input_date = input_date[:6] + "20" + input_date[6:]
    if not await check_date(input_date):
        await message.answer("‚ùå –í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞!")
        return
    await state.update_data(event_date=input_date)
    await message.answer("üïó –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—á–µ—Ä–µ–∑ —Ç–æ—á–∫—É!)")
    await state.set_state(AddEvent.waiting_for_start_time.state)

async def read_event_start_time(message: types.Message, state: FSMContext):
    try:
        time = message.text.split('.')
        if not (-1 < int(time[0]) < 24 and -1 < int(time[1]) < 60):
            await message.answer("‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è!")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è!")
        return

    await state.update_data(event_start_time=message.text)
    await message.answer("üïó –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    await state.set_state(AddEvent.waiting_for_end_time.state)

async def read_event_end_time(message: types.Message, state: FSMContext):
    try:
        time = message.text.split('.')
        if not (-1 < int(time[0]) < 24 and -1 < int(time[1]) < 60):
            await message.answer("‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è!")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è!")
        return
    await state.update_data(event_end_time=message.text)
    await message.answer("‚òéÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã")
    print(1)
    await state.set_state(AddEvent.waiting_for_contacts.state)

async def read_event_contacts(message: types.Message, state: FSMContext):
    await state.update_data(event_contacts=message.text)
    await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å")
    print(2)
    await state.set_state(AddEvent.waiting_for_address.state)
async def read_event_address(message: types.Message, state: FSMContext):
    await state.update_data(event_address=message.text)
    await message.answer("üñã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
    await state.set_state(AddEvent.waiting_for_about.state)

async def read_event_about(message: types.Message, state: FSMContext):
    await state.update_data(event_about=message.text)
    data = await state.get_data()
    event_info = [0, data['event_name'],
                  data['event_cost'],
                  data['event_date'],
                  data['event_start_time'],
                  data['event_end_time'],
                  data['event_contacts'],
                  data['event_address'],
                  data['event_about']
                  ]
    event_id = add_event(event_info)
    await state.finish()
    await message.reply("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! ü•≥\n\n\n"
                         f"<b>{event_info[1]}</b> - üíµ {event_info[2]} —Ä—É–±–ª–µ–π\n\n"
                         f"üóì {event_info[3]}, "
                         f"üïó {event_info[4]}-{event_info[5]}\n\n"
                         f"‚òéÔ∏è {event_info[6]}\n\n"
                         f"üìç {event_info[7]}\n\n"
                         f"‚ÑπÔ∏è {event_info[8]}\n\n"
                         f"üÜî ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {event_id}",
                        reply_markup=kb.about_event_kb)
    await log("–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", message.from_user.id)
    await schedule_jobs(get_event_datetime(event_id), event_id)

def register_handlers_new_event(dp: disp):
    dp.register_message_handler(new_event, commands='new_event', state="*")
    dp.register_message_handler(read_event_name, state=AddEvent.waiting_for_name)
    dp.register_message_handler(read_event_cost, state=AddEvent.waiting_for_cost)
    dp.register_message_handler(read_event_date, state=AddEvent.waiting_for_date)
    dp.register_message_handler(read_event_start_time, state=AddEvent.waiting_for_start_time)
    dp.register_message_handler(read_event_end_time, state=AddEvent.waiting_for_end_time)
    dp.register_message_handler(read_event_contacts, state=AddEvent.waiting_for_contacts)
    dp.register_message_handler(read_event_address, state=AddEvent.waiting_for_address)
    dp.register_message_handler(read_event_about, state=AddEvent.waiting_for_about)


