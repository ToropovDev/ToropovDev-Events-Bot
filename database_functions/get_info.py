from database_functions.creating_tables import *
import datetime

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
def get_event_info(event_id):
    cur.execute("SELECT * FROM events;")
    fetch_all = cur.fetchall()
    event_info = []
    for event in fetch_all:
        if event[0] == int(event_id):
            event_info = list(event)
    result = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!\n\n\n" \
    f"<b>{event_info[1]}</b> - üíµ {event_info[2]} —Ä—É–±–ª–µ–π\n\n" \
    f"üóì {event_info[3]}, " \
    f"üïó {event_info[4]}-{event_info[5]}\n\n" \
    f"‚Ñπ‚òéÔ∏è {event_info[6]}\n\n" \
     f"‚Ñπüìç {event_info[7]}\n\n" \
     f"‚ÑπÔ∏è {event_info[8]}\n\n" \
    f"üÜî ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {event_id}"
    return result

# –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–π–¥–∏ –∞–¥–º–∏–Ω–æ–≤
def get_admins_ids():
    cur.execute("SELECT id FROM users WHERE is_admin=1;")
    fetch_all = cur.fetchall()
    result = [i[0] for i in fetch_all]
    return result

def get_all_ids():
    cur.execute("SELECT id FROM users;")
    fetch_all = cur.fetchall()
    result = [i[0] for i in fetch_all]
    return result

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
def get_event_param(event_id, param_index):
    cur.execute("SELECT * FROM events;")
    fetch_all = cur.fetchall()
    result = ''
    for event in fetch_all:
        if event[0] == event_id:
            result = str(event[param_index+1])
    return result

def get_event_info_list(event_id):
    cur.execute("SELECT * FROM archive;")
    fetch_all = cur.fetchall()
    event_id = int(event_id)
    result = (0, 0, 0, 0, 0, 0, 0, 0, 0)
    for event in fetch_all:
        if event[0] == event_id:
            result = event
    return result


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ—ã –æ –≤—Å–µ—Ö –º–µ—Ä–æ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞
def get_all_events():
    cur.execute("SELECT * FROM events;")
    fetch_all = cur.fetchall()
    result = "<b>–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b>\n\n"
    events = []
    for i in range(len(fetch_all)):
        events += [(fetch_all[i][1], fetch_all[i][0], fetch_all[i][3].split("."))]
    events = sorted(events, key=lambda x: (x[2][2], x[2][1], x[2][0]))
    for i in range(len(events)):
        result += f"{i+1}) {events[i][0]} (ID: {events[i][1]})\n" \
                  f"üóì –î–∞—Ç–∞: {events[i][2][0]+'.'+events[i][2][1]+'.'+events[i][2][2]}\n\n"
    result += "\n‚ùï –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:"
    if not events:
        result = "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π!"
    return result, events

# –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ—ã –æ –≤—Å–µ—Ö –º–µ—Ä–æ –≤ –∞—Ä—Ö–∏–≤–µ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞
def get_all_archive():
    cur.execute("SELECT * FROM archive;")
    fetch_all = cur.fetchall()
    result = "<b>–ê—Ä—Ö–∏–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π</b>\n\n" \
             "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä—Ö–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –º–æ–∂–Ω–æ –≤ " \
             "<a href=\"https://docs.google.com/spreadsheets/d" \
             "/1Co-Rv7WeCT_RYQM7U14PRBb8EQBhLed1sSXD84OPBrE/edit#gid=0\">—Ç–∞–±–ª–∏—Ü–µ</a>\n\n"
    events = []
    for i in range(len(fetch_all)):
        events += [(fetch_all[i][1], fetch_all[i][0], fetch_all[i][3].split("."))]
    events = sorted(events, key=lambda x: (x[2][2], x[2][1], x[2][0]))
    for i in range(len(events)):
        result += f"{i+1}) {events[i][0]} (ID: {events[i][1]})\n" \
                  f"üóì –î–∞—Ç–∞: {events[i][2][0]+'.'+events[i][2][1]+'.'+events[i][2][2]}\n\n"
    return result

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –≤—Å–µ—Ö –º–µ—Ä–æ
def get_events_ids():
    cur.execute("SELECT * FROM events;")
    fetch_all = cur.fetchall()
    result = []
    for i in range(len(fetch_all)):
        result += [(fetch_all[i][0], fetch_all[i][1])]
    return result

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –º–µ—Ä–æ
def get_event_datetime(event_id):
    cur.execute("SELECT * FROM events;")
    fetch_all = cur.fetchall()
    date, time = '', ''
    for event in fetch_all:
        if event[0] == event_id:
            date = event[3].split('.')
            time = event[4].split('.')
    result = datetime.datetime(int(date[2]), int(date[1]), int(date[0]), int(time[0]), int(time[1]))
    return result
